import Head from "next/head";
import Image from "next/image";
import styles from "../styles/Home.module.css";
import Matter from "matter-js";
import React from "react";
import fetch from "isomorphic-fetch";
import decomp from "poly-decomp";

const Engine = Matter.Engine;
const Render = Matter.Render;
const World = Matter.World;
const Bodies = Matter.Bodies;
const Vertices = Matter.Vertices;
const Composite = Matter.Composite;
const Composites = Matter.Composites;
const Common = Matter.Common;
const Runner = Matter.Runner;
const Mouse = Matter.Mouse;
const MouseConstraint = Matter.MouseConstraint;
const STAR = Vertices.fromPath(
	"50 0 63 38 100 38 69 59 82 100 50 75 18 100 31 59 0 38 37 38"
);
const SMALL_STAR = Vertices.scale(
	Vertices.fromPath(
		"50 0 63 38 100 38 69 59 82 100 50 75 18 100 31 59 0 38 37 38"
	),
	0.5,
	0.5
);

const API_URL = process.env.API;
const WIDTH = 800;
const HEIGHT = 600;

export default function Home({ count }) {
	const boxRef = React.useRef();
	const canvasRef = React.useRef();

	React.useEffect(() => {
		let engine = Engine.create({});
		let render = Render.create({
			element: boxRef.current,
			engine: engine,
			canvas: canvasRef.current,
			options: {
				background: "#00754a",
				width: WIDTH,
				height: HEIGHT,
				wireframes: false,
			},
		});

		Render.run(render);

		const runner = Runner.create();
		Runner.run(runner, engine);

		// Concave Support
		window.decomp = decomp;

		// Walls
		Composite.add(engine.world, [
			Bodies.rectangle(WIDTH / 2, 0, WIDTH, 50, {
				render: {
					fillStyle: "#9d5116",
					strokeStyle: "#9d5116",
					lineWidth: 1,
				},
				isStatic: true,
			}),
			Bodies.rectangle(WIDTH / 2, HEIGHT, WIDTH, 50, {
				render: {
					fillStyle: "#9d5116",
					strokeStyle: "#9d5116",
					lineWidth: 1,
				},
				isStatic: true,
			}),
			Bodies.rectangle(0, HEIGHT / 2, 50, HEIGHT, {
				render: {
					fillStyle: "#9d5116",
					strokeStyle: "#9d5116",
					lineWidth: 1,
				},
				isStatic: true,
			}),
			Bodies.rectangle(WIDTH, HEIGHT / 2, 50, HEIGHT, {
				render: {
					fillStyle: "#9d5116",
					strokeStyle: "#9d5116",
					lineWidth: 1,
				},
				isStatic: true,
			}),
		]);

		// Star Generator
		const big = Math.floor(count / 25);
		const small = count % 25;
		const stars = [];
		for (let i = 0; i < big; i++) {
			stars.push(
				Bodies.fromVertices(
					WIDTH / 2,
					200,
					STAR,
					{
						restitution: 0.05,
					},
					true
				)
			);
		}
		for (let i = 0; i < small; i++) {
			stars.push(
				Bodies.fromVertices(
					WIDTH / 2,
					200,
					SMALL_STAR,
					{
						restitution: 0.1,
					},
					true
				)
			);
		}
		Composite.add(engine.world, stars);

		// Add Mouse Control
		const mouse = Mouse.create(render.canvas);
		const mouseConstraint = MouseConstraint.create(engine, {
			mouse,
			constraint: {
				stiffness: 0.2,
				render: { visible: false },
			},
		});
		Composite.add(engine.world, mouseConstraint);
		render.mouse = mouse;

		// Fit render viewport to scene
		Render.lookAt(render, {
			min: { x: 0, y: 0 },
			max: { x: WIDTH, y: HEIGHT },
		});

		return () => {
			Render.stop(render);
			Runner.stop(runner);
		};
	}, []);

	return (
		<div className={styles.container}>
			<Head>
				<title>Create Next App</title>
				<meta
					name="description"
					content="Generated by create next app"
				/>
				<link rel="icon" href="/favicon.ico" />
			</Head>
			<main>
				<div
					style={{
						display: "flex",
						flex: 1,
						flexDirection: "column",
						justifyContent: "center",
						alignItems: "center",
					}}
				>
					<div
						ref={boxRef}
						style={{
							left: 0,
							right: 0,
							top: 0,
							bottom: 0,
							position: "absolute",
							display: "flex",
							justifyContent: "center",
						}}
					>
						<canvas ref={canvasRef} />
					</div>
					<div
						style={{
							flex: 1,
							width: "100%",
							display: "flex",
							zIndex: 999,
						}}
					>
						<h1 style={{ color: "#fff" }}>Total Stars: {count}</h1>
					</div>
				</div>
			</main>
		</div>
	);
}

export async function getServerSideProps(context) {
	const res = await fetch(API_URL);
	const json = await res.json();

	return {
		props: {
			count: json.total,
		},
	};
}
